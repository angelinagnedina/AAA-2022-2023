import click
from time import time_ns
from typing import Any


RECIPE = {
    'margherita': [
        ('tomato sauce', 100, 'ml'),
        ('mozzarella', 300, 'g'),
        ('tomatoes', 2, '')
    ],
    'pepperoni': [
        ('tomato sauce', 80, 'ml'),
        ('mozzarella', 100, 'g'),
        ('pepperoni', 150, 'g')
    ],
    'hawaiian': [
        ('tomato sauce', 60, 'ml'),
        ('mozzarella', 200, 'g'),
        ('chicken', 200, 'g'),
        ('pineapples', 100, 'g')
    ]
}


class Pizza:
    """–ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ü—Ü–µ, –¥–æ—Å—Ç—É–ø–Ω–æ–π –≤ –º–µ–Ω—é."""
    def __init__(self, pizza_name: str, size: str):
        self.pizza_name = pizza_name.lower()
        self.size = size
        # –ö–æ–ª-–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å–¥–µ–ª–∞–µ–º –∑–∞–≤–∏—Å–∏–º—ã–º –æ—Ç —Ä–∞–∑–º–µ—Ä–∞
        self.multiplier = 1 if self.size == 'L' else 2

    def dict(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –ø–∏—Ü—Ü—ã."""
        print(f'–†–µ—Ü–µ–ø—Ç –¥–ª—è {self.pizza_name} —Ä–∞–∑–º–µ—Ä–∞ {self.size}')
        ingredients = RECIPE[self.pizza_name]

        for ingredient, amount, count in ingredients:
            print(f'{ingredient}: {self.multiplier * amount}{count}')

    def __eq__(self, other) -> bool:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –ø–∏—Ü—Ü—ã."""
        # –£–¥–æ—Å—Ç–æ–≤–µ—Ä–∏–º—Å—è, —á—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∏—Ü—Ü—É —Å –ø–∏—Ü—Ü–µ–π
        assert isinstance(other, Pizza), f'{other} is not a pizza!'
        return self.pizza_name == other.pizza_name and self.size == other.size


def log(pattern: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —à–∞–±–ª–æ–Ω, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤—Ä–µ–º—è."""
    def decorator(func):
        def wrapper(*args, **kwargs):
            time_start = time_ns()
            res = func(*args, **kwargs)
            # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ -
            # –≤—Ä–µ–º—è –Ω–µ –≤—ã–≤–æ–¥–∏–º
            if res:
                time_end = time_ns()
                print(pattern.format(time_end - time_start))
            return res
        return wrapper
    return decorator


@log('üöó –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {} c.')
def deliver(dish: Pizza) -> bool:
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    return True if dish else False


@log('‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {} —Å.')
def cook(pizza: str, size: str) -> Any:
    dish = None

    # –ù–µ –≥–æ—Ç–æ–≤–∏–º –ø–∏—Ü—Ü—É, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    if pizza.lower() not in RECIPE.keys():
        print('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –∏–∑ –º–µ–Ω—é.')
    elif size not in ['L', 'XL']:
        print('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä.')
    else:
        dish = Pizza(pizza, size)

    return dish


@click.group()
def cli():
    pass


@cli.command()
@click.option('--delivery', default=False, is_flag=True)
@click.argument('pizza', nargs=1)
@click.argument('size', nargs=1, default='L')
def order(pizza: str, size: str, delivery: bool):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É."""
    dish = cook(pizza, size)

    if delivery:
        deliver(dish)


@cli.command()
def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é."""
    icons = {
        'margherita': 'üßÄ',
        'pepperoni': 'üçï',
        'hawaiian': 'üçç'
    }
    for pizza, ingredients in RECIPE.items():
        products = ', '.join([ingredient[0] for ingredient in ingredients])
        click.echo(f'{pizza.capitalize()} {icons[pizza]}: {products}')


if __name__ == '__main__':
    cli()
